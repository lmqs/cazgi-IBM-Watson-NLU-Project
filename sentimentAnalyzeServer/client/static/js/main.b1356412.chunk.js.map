{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","this","props","emotions","map","item","k","className","colspan","JSON","stringify","text","item2","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","fetch","then","response","data","dado","parse","console","log","output","result","data2","sentiments","style","color","fontSize","sendForEmotionAnalysis","json","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b1356412.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n    render() {\n        return (\n            <div>\n                {\n                    this.props.emotions.map((item, k) => (\n                        (\n                            <table className=\"table table-bordered\">\n                                <thead>\n                                    <tr>\n                                        <th colspan=\"2\">\n                                            {JSON.stringify(item.text)}\n                                        </th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {item.emotions.map((item2) => (\n                                        <>\n                                            <tr>\n                                                <td>\n                                                    {item2[0]}\n                                                </td>\n                                                <td>\n                                                    {item2[1]}\n                                                </td>\n                                            </tr>\n                                        </>\n                                    ))}\n                                </tbody>\n                            </table>\n                        )\n                    ))\n                }\n\n\n            </div>\n        );\n    }\n\n}\nexport default EmotionTable;","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\n\nclass App extends React.Component {\n    state = {\n        innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n        mode: \"text\",\n        sentimentOutput: [],\n        sentiment: true\n    }\n\n    renderTextArea = () => {\n        document.getElementById(\"textinput\").value = \"\";\n        if (this.state.mode === \"url\") {\n            this.setState({\n                innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n                mode: \"text\",\n                sentimentOutput: [],\n                sentiment: true\n            })\n        }\n    }\n\n    renderTextBox = () => {\n        document.getElementById(\"textinput\").value = \"\";\n        if (this.state.mode === \"text\") {\n            this.setState({\n                innercomp: <textarea rows=\"1\" cols=\"50\" id=\"textinput\" />,\n                mode: \"url\",\n                sentimentOutput: [],\n                sentiment: true\n            })\n        }\n    }\n\n    sendForSentimentAnalysis = () => {\n        this.setState({ sentiment: true });\n        let url = \".\";\n\n        if (this.state.mode === \"url\") {\n            url = url + \"/url/sentiment?url=\" + document.getElementById(\"textinput\").value;\n        } else {\n            url = url + \"/text/sentiment?text=\" + document.getElementById(\"textinput\").value;\n        }\n        fetch(url).then((response) => {\n            response.text().then((data) => {\n                let dado = JSON.parse(data);\n                this.setState({ sentimentOutput: data });\n                console.log(typeof(data));\n                console.log(typeof(dado));\n                let output = data;\n\n                console.log(dado.result);\n\n                let data2 = dado.result[0].sentiments[1][1];\n                \n                console.log(data2);\n                // console.log(JSON.stringify(dado.result));\n                if (data2 === \"positive\") {\n                    output = <div style={{ color: \"green\", fontSize: 20 }}>{data2}</div>\n                } else if (data2 === \"negative\") {\n                    output = <div style={{ color: \"red\", fontSize: 20 }}>{data2}</div>\n                } else {\n                    output = <div style={{ color: \"orange\", fontSize: 20 }}>{data2}</div>\n                }\n                this.setState({ sentimentOutput: output });\n            })\n        });\n    }\n\n    sendForEmotionAnalysis = () => {\n\n        this.setState({ sentiment: false });\n        let url = \".\";\n        if (this.state.mode === \"url\") {\n            url = url + \"/url/emotion?url=\" + document.getElementById(\"textinput\").value;\n        } else {\n            url = url + \"/text/emotion/?text=\" + document.getElementById(\"textinput\").value;\n        }\n        fetch(url).then((response) => {\n            response.json().then((data) => {\n                this.setState({ sentimentOutput: <EmotionTable emotions={data.result} /> });\n            })\n        });\n    }\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n                <button className=\"btn btn-dark\" onClick={this.renderTextBox}>URL</button>\n                <br /><br />\n                {this.state.innercomp}\n                <br />\n                <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n                <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n                <br />\n                {this.state.sentimentOutput}\n            </div>\n        );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}